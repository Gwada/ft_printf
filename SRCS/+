#include "ft_printf.h"

static	short			ft_nb_byte(t_data *data)
{
	if (data->B_D & LONG)
		return (sizeof(long));
	else if (data->B_D & SIZE_T)
		return (sizeof(size_t));
	else if (data->B_D & SHORT)
		return (sizeof(short));
	else if (data->B_D & SHORTX2)
		return (sizeof(char));
	else
		return (sizeof(int));
	return (0);
}

static void				ft_put_bin_p(t_data *data, ULX2I n)
{
	char				i;
	char				nbr[72];
	unsigned char		len;
	long long unsigned	mask;

	nbr[71] = '\0';
	i = 0;
	len = 0;
	mask = ~(~0LLU >> 1);
	mask >>= (-(ft_nb_byte(data) * 8));
	int j = -1;
	while (mask)
	{
		nbr[++j] = n & mask ? 0x31 : 0x30;
		if (j && !(j % 8))
			nbr[++j] = 0x20;
		if (i && !(i % 8))
			ft_buffering(data, " ", 1);
		//nbr[j++] = n & mask ? 0x31 : 0x30;
		ft_buffering(data, n & mask ? "1" : "0", 1);
		mask >>= 1;
		++i;
	}
	printf ("|%s|\tj = %d\n", nbr);
	//ft_buffering(data, nbr, i + 1);
}

void					ft_set_base(t_data *data)
{
	ULX2I				n;

	if ((data->B_D & LONGX2) || (data->B_D & INTMAX) || (*data->ft == 'B'))
		n = (ULX2I)va_arg(data->ap, ULX2I);
	else if (data->B_D & LONG)
		n = (ULX2I)va_arg(data->ap, ULI);
	else if (data->B_D & SIZE_T)
		n = (ULX2I)va_arg(data->ap, size_t);
	else if (data->B_D & SHORT)
		n = (ULX2I)((USI)va_arg(data->ap, int));
	else if (data->B_D & SHORTX2)
		n = (ULX2I)((unsigned char)va_arg(data->ap, int));
	else
		n = (ULX2I)va_arg(data->ap, int);
	if (ft_strchr("bB", *data->ft))
		ft_put_bin_p(data, n);
	else
		ft_itoa_base_p(data, n, (ft_strchri_up("ou..x", *data->ft) + 4) << 1);
}
